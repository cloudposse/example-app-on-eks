version: '1.0'

stages:
- Prepare
- Build
- Test
- Deploy

steps:
  main_clone:
    title: "Clone repository"
    type: git-clone
    stage: Prepare
    description: "Initialize"
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    git: CF-default
    revision: ${{CF_REVISION}}

  export:
    title: Export Environment
    stage: Prepare
    image: alpine
    commands:
    - cf_export GIT_BRANCH=${{CF_BRANCH}}
    - cf_export PROJECT=${{CF_REPO_NAME}}
    - cf_export APP_NAME=${{CF_REPO_NAME}}
    - cf_export CHART_NAME=monochart
    - cf_export PIPELINE_ENV=integration
    - cf_export NAMESPACE=pr-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}
    - cf_export RELEASE_NAME=pr-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}
    - cf_export APP_HOST=pr-${{CF_PULL_REQUEST_NUMBER}}.${{CF_REPO_NAME}}.${{BASE_HOST}}
    - cf_export IMAGE_NAME=${{CF_DOCKER_REPO_URL}}/${{CF_REPO_NAME}}
    - cf_export IMAGE_TAG=${{CF_REVISION}}

  build:
    type: parallel
    stage: Build
    steps:
      build_image:
        title: Build image
        type: build
        description: Build app
        image_name: ${{CF_REPO_NAME}}
        tag: ${{CF_SHORT_REVISION}}
        dockerfile: Dockerfile
        no_cache: false
        no_cf_cache: false

      build_test:
        title: "Build test image"
        type: build
        description: "Build test image"
        dockerfile: Dockerfile
        image_name: ${{CF_REPO_NAME}}
        tag: ${{CF_SHORT_REVISION}}-test
        when:
          condition:
            all:
              testsEnabled: "'${{INTEGRATION_TESTS_ENABLED}}' == 'true'"

  test:
    title: "Run tests"
    stage: Test
    type: composition
    fail_fast: true
    # Run the docker-composition defined in the file
    composition: codefresh/test/docker-compose.yml
    # Run tests against the composition
    composition_candidates:
      app:
        image: ${{build_test}}
        entrypoint: /bin/sh -c
        command: codefresh/test/test.sh
        env_file:
          - codefresh/test/test.env
        volumes:
          - '${{CF_VOLUME_NAME}}:${{CF_VOLUME_PATH}}'
        working_dir: '${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}'
    when:
      condition:
        all:
          testsEnabled: "'${{INTEGRATION_TESTS_ENABLED}}' == 'true'"

  set_github_deployment_status_to_pending:
    title: Set GitHub deployment status to "pending"
    stage: Deploy
    image: cloudposse/github-status-updater
    environment:
    - GITHUB_ACTION=update_state
    - GITHUB_TOKEN=${{GITHUB_TOKEN}}
    - GITHUB_OWNER=${{CF_REPO_OWNER}}
    - GITHUB_REPO=${{CF_REPO_NAME}}
    - GITHUB_REF=${{CF_REVISION}}
    - GITHUB_CONTEXT=Staging Environment
    - GITHUB_STATE=pending
    - GITHUB_DESCRIPTION=Deploying changes to ${{NAMESPACE}} namespace
    - GITHUB_TARGET_URL=http://${{APP_HOST}}
    when:
      condition:
        all:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"
          githubNotificationsEnabled: "'${{GITHUB_NOTIFICATIONS_ENABLED}}' == 'true'"

  push_image_commit:
    title: Push image with commit tag
    stage: Deploy
    type: push
    candidate: ${{build_image}}
    tags:
    - "${{CF_REVISION}}"

  wait:
    title: Wait
    stage: Deploy
    image: codefresh/cli:latest
    commands:
      - codefresh get builds --pipeline=destroy --pipeline=pull-request --branch=${{CF_BRANCH}} --status running --limit 1000 -o json | jq --arg id ${{CF_BUILD_ID}} -ser 'flatten|.[-1].id==$id'
    retry:
      maxAttempts: 10
      delay: 20
      exponentialFactor: 1.1
    when:
      condition:
        any:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"

  deploy_helmfile:
    title: Deploy with helmfile
    stage: Deploy
    image: "${{CF_DOCKER_REPO_URL}}/${{CF_REPO_NAME}}:${{CF_REVISION}}"
    working_directory: /deploy/
    commands:
    # Announce the release version
    - "echo 'Preparing to deploy ${{CF_REPO_NAME}}:${{CF_RELEASE_TAG}}'"
    # Deploy chart to cluster in a dedicated namespace
    - "/deploy/ctl --namespace=${{NAMESPACE}} rolling"
    when:
      condition:
        any:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"

  set_github_deployment_status_to_success:
    title: Set GitHub deployment status to "success"
    stage: Deploy
    image: cloudposse/github-status-updater
    environment:
    - GITHUB_ACTION=update_state
    - GITHUB_TOKEN=${{GITHUB_TOKEN}}
    - GITHUB_OWNER=${{CF_REPO_OWNER}}
    - GITHUB_REPO=${{CF_REPO_NAME}}
    - GITHUB_REF=${{CF_REVISION}}
    - GITHUB_CONTEXT=Staging Environment
    - GITHUB_STATE=success
    - GITHUB_DESCRIPTION=Deployed to ${{NAMESPACE}} namespace
    - GITHUB_TARGET_URL=http://${{APP_HOST}}
    when:
      condition:
        all:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"
          githubNotificationsEnabled: "'${{GITHUB_NOTIFICATIONS_ENABLED}}' == 'true'"

  send_slack_notification:
    title: Send notification to Slack channel
    stage: Deploy
    image: cloudposse/build-harness:${{BUILD_HARNESS_VERSION}}
    working_directory: /build-harness
    environment:
      - GIT_COMMIT_SHORT=${{CF_SHORT_REVISION}}
      - GIT_COMMIT_URL=${{CF_COMMIT_URL}}
      - GIT_COMMIT_MESSAGE=${{CF_COMMIT_MESSAGE}}
      - GIT_COMMIT_AUTHOR=${{CF_COMMIT_AUTHOR}}
      - GIT_BRANCH_TAG=${{CF_BRANCH_TAG_NORMALIZED}}
    commands:
    - make codefresh/notify/slack/deploy/webapp GIT_COMMIT_TIMESTAMP=$((${{CF_BUILD_TIMESTAMP}}/1000))
    when:
      condition:
        any:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"

